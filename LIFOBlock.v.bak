module LIFO( data, q, op, EN, reset, empty, full, clock);

input[15:0] data;
input reset, clock, push, pop;

output reg empty, full;
output reg [15:0] q;
output reg [6:0] count;

wire writing = push && ( count < 16 || pop);
wire reading = pop && count > 0;

reg[6:0] next_count;

always @(*)
	if(reset)
		next_coount = 0;
	else if (writing && !reading)
		next_count = count+1;
	else if (reading && !writing)
		next_count = count-1;
	else
		next_count = count;

always @(posedge clock)
	count <= next_count;

always @(posedge clock)
	full <= next_count == 64;
	
always @(posedge clock)
	empty <= next_count == 0;
	

wire[5:0] stackPointer = writing ? count[5:0] : (count[5:0])-1;

reg [15:0] stack[63:0];

always @(posedge clk)
	if (writing && !reading)
		stack[stackPointer] <= q;

reg[15:0] reader;
always @(posedge clock)
	if(reading)
		reader <= stack[stackPointer];

	
reg [15:0] writer;
always @(posedge clock)
	if(writing)
		writer <= data;

reg muxSelector;
always @(posedge clock)
	if(reset)
		muxSelector <= 0;
	else if(writing)
		muxSelector <= 0;
	else if (reading)
		muxSelector <= 1;
		
assign q = muxSelector ? reader : writer;
	
